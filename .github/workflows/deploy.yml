name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-south-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: demo-ecr-repo           # set this to your Amazon ECR repository name

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: demo-app
      run: |
         # Build a docker container image
         cat ./Dockerfile | docker run --rm -i hadolint/hadolint
         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
         docker build -t demo-app-image .

    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: demo-app
      with:
        image-ref: demo-app-image
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Deploy image to ECR
      id: deploy-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: demo-app
      run: |
        # push it to ECR so that it can
        # be deployed to EKS
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Install kubectl cli
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}

    - name: run basic command
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      run: 
        #base64 --decode ${base64-kube-config} > ./kube_config
        kubectl version | grep Client
        #export KUBECONFIG=./kube_config
        aws eks update-kubeconfig --region ap-south-1 --name DemoEKS-dev
        cat ~/.kube/config
        kubectl get pods

      
    # - name: deploy to cluster 
    #   uses: kodermax/kubectl-aws-eks@master 
    #   env: 
    #     KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }} 
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
    #     with: 
    #       args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
          
    # - name: verify deployment 
    #   uses: kodermax/kubectl-aws-eks@master 
    #   env: 
    #     KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }} 
    #     with: 
    #       args: rollout status deployment/my-app 